#include<sys/types.h> 
#include<unistd.h> 
#include<stdio.h> 
#include<sys/wait.h> 
int main() 
{ 
int w_status; 
pid_t pid; 
pid=fork(); 
if(pid<0) 
{ 
printf("\nError"); 
return 0; 
} 
else if(pid==0) 
{ 
printf("\nCHILD"); 
printf("\nChild with pid: %d", getpid()); 
printf("\nParent pid: %d\n", getppid()); 
//Grep 
execl(â€œ./r","r","Hi","a.txt",NULL); 
} 
else 
{ 
} 
return 0; 
} 
printf("\nPARENT"); 
printf("\nParent with pid: %d", getpid()); 
printf("\nParent with child pid: %d", pid); 
wait(&w_status); 
printf("\nchild Finished"); 
//Copy 
execl("./cp","cp","a.txt","p.txt",NULL);



#include<stdlib.h> 
#include<string.h> 
int main(int argc , char* argv[]) 
{ 
char fn[15],tx[15],t[100]; 
FILE *f1; 
int c=0; 
if(argc< 3) 
{ 
(for Grep) 
printf("Insufficient Arguments"); 
exit(0); 
} 
f1= fopen(argv[2],"r"); 
if(f1==NULL) 
{ 
printf("%s not available",argv[2]); 
exit(0); 
} 
while(fgets(t,100,f1)!=NULL) 
{ 
if(strstr(t,argv[1])) 
{  
c++; 
fputs(t,stdout); 
} 
} 
printf("Total count : %d\n",c); 
fclose(f1); 
return 0; 
} 



#include<stdio.h> 
#include<string.h> 
#include<stdlib.h> 
int main(int argc, char* argv[]) 
{ 
FILE *f1, *f2; 
char s[100]; 
if(argc < 3) 
{ 
printf("Less number of parameters"); 
exit (0); 
} 
f1= fopen(argv[1], "r"); 
if(f1==NULL) 
{ 
printf("%s not available",argv[1]); 
exit (0); 
} 
f2= fopen(argv[2], "w"); 
while(fgets(s, sizeof(s), f1) != NULL) 
{ 
fputs(s, f2); 
} 
printf("%s is copied to %s\n",argv[1],argv[2]); 
fclose(f1); 
fclose(f2); 
return 0; 
} 
